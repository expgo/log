// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum
//   - github.com/expgo/factory/annotation

package annotation

import (
	"errors"
	"fmt"

	"github.com/expgo/factory"
)

const (
	// AnnotationLog is an Annotation of type Log.
	AnnotationLog Annotation = "Log"
)

func init() {
	factory.Singleton[Factory]()
}

var ErrInvalidAnnotation = errors.New("not a valid Annotation")

var _AnnotationNameMap = map[string]Annotation{
	"Log": AnnotationLog,
}

// Name is the attribute of Annotation.
func (x Annotation) Name() string {
	if v, ok := _AnnotationNameMap[string(x)]; ok {
		return string(v)
	}
	return fmt.Sprintf("Annotation(%s).Name", string(x))
}

// Val is the attribute of Annotation.
func (x Annotation) Val() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Annotation) IsValid() bool {
	_, ok := _AnnotationNameMap[string(x)]
	return ok
}

// String implements the Stringer interface.
func (x Annotation) String() string {
	return x.Name()
}

// ParseAnnotation converts a string to an Annotation.
func ParseAnnotation(value string) (Annotation, error) {
	if x, ok := _AnnotationNameMap[value]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", value, ErrInvalidAnnotation)
}
